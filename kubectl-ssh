#!/usr/bin/env zsh

set -eu

usage() {
  cat <<EOF

Usage: kubectl ssh [OPTIONAL: -n <namespace>] [OPTIONAL: -u <user>] [OPTIONAL: -c <Container Name>] [ Pod Name ] -- [command]
Example: kubectl ssh -n default -u root -c prometheus prometheus-282sd0s2 -- bash

Run a command in a running container

Options:
  -h  Show usage
  -d  Enable debug mode. Print a trace of each commands
  -n  The namespace to use for this request. If not provided, defaults to current namespace.
  -u  Username or UID (format: <name|uid>[:<group|gid>]). If not provided, defaults to root.
  -c  Container name. If not provided, the first container in the pod will be chosen
  -o  Use an alternative nodeshell method
EOF
  exit 0
}

to_json() {
  text="$*"
  p=""
  for i in $text; do
    [[ -n "$p" ]] && p+=", "
    p+="\"$i"\"
  done
  echo -en "$p"
}

[ $# -eq 0 ] && usage

KUBECTL="$(which kubectl)"
COMMAND="/bin/sh"
UNAME="root"
CONTAINER="NONE"
NAMESPACE="default"
NAMESPACE_ARG=""
RUN_MODE="default"

while getopts "hdop:n:u:c:" arg; do
  case $arg in
  p) # Specify pod name.
    POD=${OPTARG}
    ;;
  n) # Specify namespace
    NAMESPACE=${OPTARG}
    NAMESPACE_ARG="--namespace=${OPTARG}"
    ;;
  u) # Specify user
    UNAME=${OPTARG}
    ;;
  c) # Specify container
    CONTAINER=${OPTARG}
    ;;
  d) # Enable debug mode
    set -x
    ;;
  o) # Use an alternative nodeshell method
    RUN_MODE="alternative"
    ;;
  h) # Display help.
    usage
    ;;
  \?)
    usage
    ;;
  esac
done

shift $((OPTIND - 1))
if [[ -z ${1+x} ]]; then
  echo "Error: You have to specify the pod name" >&2
  usage
fi
POD="$1"
shift

if [[ $# -gt 0 ]]; then
  if [[ $1 == "--" ]]; then
    shift
    COMMAND="$*"
  else
    echo "Error: Invalid option: $0" >&2
    usage
  fi
fi

echo -e "\nConnecting...\nPod: ${POD}\nNamespace: ${NAMESPACE}\nUser: ${UNAME}\nContainer: ${CONTAINER}\nCommand: $COMMAND\n"
# $temp_container is the name of our temporary container which we use to connect behind the scenes. Will be cleaned up automatically.
temp_container="ssh-pod-${RANDOM}"

# We want to mount the docker socket on the node of the pod we're exec'ing into.
NODENAME=$(${KUBECTL} ${NAMESPACE_ARG} get pod "${POD}" -o go-template='{{.spec.nodeName}}')
NODESELECTOR='"nodeSelector": {"kubernetes.io/hostname": "'$NODENAME'"},'
K3S_NODE=$(${KUBECTL} ${NAMESPACE_ARG} get node $NODENAME -o go-template='{{.metadata.annotations}}' | grep 'k3s.io') || K3S_NODE=""

# Adds toleration if the target container runs on a tainted node. Assumes no more than one taint. Change if yours have more than one or are configured differently.
TOLERATION_VALUE=$($KUBECTL $NAMESPACE_ARG get pod "${POD}" -ojsonpath='{.spec.tolerations[].value}') >/dev/null 2>&1
if [[ "$TOLERATION_VALUE" ]]; then
  TOLERATION_KEY=$($KUBECTL $NAMESPACE_ARG get pod "${POD}" -ojsonpath='{.spec.tolerations[].key}')
  TOLERATION_OPERATOR=$($KUBECTL $NAMESPACE_ARG get pod "${POD}" -ojsonpath='{.spec.tolerations[].operator}')
  TOLERATION_EFFECT=$($KUBECTL $NAMESPACE_ARG get pod "${POD}" -ojsonpath='{.spec.tolerations[].effect}')
  TOLERATIONS='"tolerations": [{"effect": "'$TOLERATION_EFFECT'","key": "'$TOLERATION_KEY'","operator": "'$TOLERATION_OPERATOR'","value": "'$TOLERATION_VALUE'"}],'
else
  TOLERATIONS=''
fi

if [[ ${CONTAINER} != "NONE" ]]; then
  DOCKER_CONTAINERID=$(eval "$KUBECTL" $NAMESPACE_ARG get pod "${POD}" -o go-template="'{{ range .status.containerStatuses }}{{ if eq .name \"${CONTAINER}\" }}{{ .containerID }}{{ end }}{{ end }}'")
else
  DOCKER_CONTAINERID=$($KUBECTL $NAMESPACE_ARG get pod "${POD}" -o go-template='{{ (index .status.containerStatuses 0).containerID }}')
fi
CONTAINERID=${DOCKER_CONTAINERID#*//}
SCHEMA=${DOCKER_CONTAINERID%%://*}
ATTACH_IMAGE="docker"
OPTIONAL_COMMAND=""

if [[ $SCHEMA == "docker" ]]; then
  echo "Pod is running in Docker runtime, using docker exec"
  CONTAINER_ARG='"docker", "exec", "--privileged", "-it", "-u", "'$UNAME'", "'$CONTAINERID'", '$(to_json "${COMMAND}")''
  VOLUME_MOUNTS='{ "mountPath": "/var/run/docker.sock", "name": "docker-sock" }'
  VOLUMES='{ "name": "docker-sock", "hostPath": { "path": "/var/run/docker.sock" } }'
elif [[ $SCHEMA == "containerd" ]]; then
  echo "Pod is running in Containerd runtime, using containerd exec"
  CONTAINER_ARG='"ctr", "-n", "k8s.io", "t", "exec", "-t", "--user", "'$UNAME'", "--exec-id", "'$temp_container'", "'$CONTAINERID'", '$(to_json "${COMMAND}")''

  #if K3S_NODE is not empty, we are running on a k3s cluster
  if [[ -n $K3S_NODE ]]; then
    echo "Pod is running in K3s runtime, using k3s exec"

    ATTACH_IMAGE="rancher/k3s"

    OPTIONAL_COMMAND='"command": ["ctr"],'
    CONTAINER_ARG='"-n", "k8s.io", "t", "exec", "-t", "--user", "'$UNAME'", "--exec-id", "'$temp_container'", "'$CONTAINERID'", '$(to_json "${COMMAND}")''

    VOLUME_MOUNTS='
      { "mountPath": "/var/lib/rancher/k3s/agent/etc", "name": "agent" },
      { "mountPath": "/var/lib/rancher/k3s/agent/containerd", "name": "internal" },
      { "mountPath": "/etc/rancher", "name": "config" },
      { "mountPath": "/run/containerd", "name": "fifo" },
      { "mountPath": "/run/k3s", "name": "containerd" }
    '
    VOLUMES='
      { "name": "agent", "hostPath": { "path": "/var/lib/rancher/k3s/agent/etc" } },
      { "name": "internal", "hostPath": { "path": "/var/lib/rancher/k3s/agent/containerd" } },
      { "name": "config", "hostPath": { "path": "/etc/rancher" } },
      { "name": "fifo", "hostPath": { "path": "/run/containerd" } },
      { "name": "containerd", "hostPath": { "path": "/run/k3s" } }
    '
  else
    VOLUME_MOUNTS='
      { "mountPath": "/run/dockershim.sock", "name": "dockershim" },
      { "mountPath": "/var/lib/containerd", "name": "images" },
      { "mountPath": "/run/containerd", "name": "containerd" },
      { "mountPath": "/etc/containerd/config.toml", "name": "credential" }
    '
    VOLUMES='
      { "name": "dockershim", "hostPath": { "path": "/run/dockershim.sock" } },
      { "name": "images", "hostPath": { "path": "/var/lib/containerd" } },
      { "name": "containerd", "hostPath": { "path": "/run/containerd" } },
      { "name": "credential", "hostPath": { "path": "/etc/containerd/config.toml" } }
    '
  fi
fi

if [[ $RUN_MODE == "alternative" ]]; then
  echo -e "\nUsing NodeShell to connect to the pod..\n"

  if !command -v kubectl-node_shell &>/dev/null; then
    echo "node-shell is not installed. Install it by running the following command:"
    echo "kubectl install-nodeshell"
    exit 1
  fi

  echo "Detecting pid for the container.."
  if [[ $SCHEMA == "docker" ]]; then
    COMMAND_FOR_PID="sh -c 'docker inspect -f '{{.State.Pid}}' $CONTAINERID'"
    PID=$(eval "$KUBECTL" $NAMESPACE_ARG node-shell $NODENAME -- $COMMAND_FOR_PID || echo "")

    # if there were an error code colllected
    if [[ $PID == $'sh: docker: not found\C-M' ]]; then
      echo -e "Error: Could not find PID for the container. Installing docker to the node-shell..."

      # Download the latest docker binary
      NODESHELL_ARCH=$(eval "$KUBECTL" $NAMESPACE_ARG node-shell $NODENAME -- sh -c 'arch' | tr -d '\r')
      DOCKER_URL=https://download.docker.com/linux/static/stable/$NODESHELL_ARCH
      DOCKER_LATEST_VERSION=$(curl -L --fail "https://hub.docker.com/v2/repositories/library/docker/tags/?page_size=1000" |
        jq '.results | .[] | .name' -r |
        sed 's/latest//' |
        grep -E '^[0-9.]+$' |
        sort --version-sort |
        tail -n 1)
      DOCKER_FULL_URL=$DOCKER_URL/docker-$DOCKER_LATEST_VERSION.tgz
      curl -L --fail $DOCKER_FULL_URL -o /tmp/docker.tgz

      # Run the temporary node-shell to get the process id
      eval "$KUBECTL" $NAMESPACE_ARG node-shell $NODENAME -- "sh -c 'sleep 180s'" &
      sleep 5
      NODESHELL_NAME=$(${KUBECTL} ${NAMESPACE_ARG} get pod -o go-template='{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | grep nsenter | head -n 1)
      eval "$KUBECTL" $NAMESPACE_ARG cp /tmp/docker.tgz $NODESHELL_NAME:/tmp/docker.tgz
      rm -f /tmp/docker.tgz

      # Install docker
      eval "$KUBECTL" $NAMESPACE_ARG exec $NODESHELL_NAME -- "sh -c 'tar -xvzf /tmp/docker.tgz --strip 1 -C /tmp; mount -o remount,exec /tmp'"

      # Get the PID
      COMMAND_FOR_PID="sh -c '/tmp/docker inspect -f '{{.State.Pid}}' $CONTAINERID'"
      PID=$(eval "$KUBECTL" $NAMESPACE_ARG exec $NODESHELL_NAME -- $COMMAND_FOR_PID)
      eval "$KUBECTL" $NAMESPACE_ARG delete pod $NODESHELL_NAME
    fi
  elif [[ $SCHEMA == "containerd" ]]; then
    COMMAND_FOR_PID="sh -c 'ctr -n k8s.io task list'"
    PID=$(eval "$KUBECTL" $NAMESPACE_ARG node-shell $NODENAME -- $COMMAND_FOR_PID | grep $CONTAINERID | sed -E 's/.* ([0-9]+) .*/\1/')
    if [[ -z $PID ]]; then
      echo "Error: Could not find PID for the container using containerd"
      echo "Retrying with cri-o..."
      COMMAND_FOR_PID="sh -c 'crictl inspect --output go-template --template '{{.info.pid}}' $CONTAINERID'"
      PID=$(eval "$KUBECTL" $NAMESPACE_ARG node-shell $NODENAME -- $COMMAND_FOR_PID)
    fi
  fi

  echo "Acquiring the userid.."
  UID_CMD="id -u $UNAME"
  COMMAND_FOR_UID="sh -c 'eval nsenter -t $PID -n -m -u -p $(to_json ${UID_CMD})'"
  USER_ID=$(eval "$KUBECTL" $NAMESPACE_ARG node-shell $NODENAME -- $COMMAND_FOR_UID | tr -d '\r')

  echo "Entering the container with PID: $PID and UID: $USER_ID"
  COMMAND_FOR_NSENTER="sh -c 'eval nsenter -t $PID -S $USER_ID -n -m -u -p $(to_json ${COMMAND})'"
  eval "$KUBECTL" $NAMESPACE_ARG node-shell $NODENAME -- $COMMAND_FOR_NSENTER
  return 0
fi

read -r -d '' OVERRIDES <<EOF || :
{
    "apiVersion": "v1",
    "metadata": { "annotations": { "sidecar.istio.io/inject" : "false" } },
    "spec": {
        "securityContext": { "runAsUser": 0, "privileged": true },
        "containers": [
            {
                "image": "'$ATTACH_IMAGE'",
                "name": "'$temp_container'",
                "securityContext": { "privileged": true },
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                $OPTIONAL_COMMAND
                "args": [
                  $CONTAINER_ARG
                ],
                "volumeMounts": [
                  $VOLUME_MOUNTS
                ]
            }
        ],
        $NODESELECTOR
        $TOLERATIONS
        "volumes": [
          $VOLUMES
        ]
    }
}
EOF

trap '$KUBECTL $NAMESPACE_ARG delete pod $temp_container >/dev/null 2>&1 &' 0 1 2 3 15

eval "$KUBECTL" $NAMESPACE_ARG run -it --restart=Never --image=docker --overrides="'${OVERRIDES}'" "$temp_container"
